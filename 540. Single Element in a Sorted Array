You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once.

Return the single element that appears only once.

Your solution must run in O(log n) time and O(1) space.

 

Example 1:

Input: nums = [1,1,2,3,3,4,4,8,8]
Output: 2
Example 2:

Input: nums = [3,3,7,7,10,11,11]
Output: 10
 

Constraints:





class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        int n = size(nums), L = 0, R = n-1, mid;
        while(L <= R) {
            mid = (L + R) >> 1;
            bool isHalfEven = (mid-L) % 2 == 0;          // check length of each half is odd or even
			
            if(mid+1 < n && nums[mid] == nums[mid+1])    // case: 1
                if(isHalfEven) L = mid+2;
                else R = mid-1;
				
            else if(mid && nums[mid] == nums[mid-1])     // case: 2
                if(isHalfEven) R = mid-2;
                else L = mid+1;
				
            else return nums[mid];                       // case: 3
        }
        return -1;   // wont be reached since we will always find required element inside loop
    }
};
