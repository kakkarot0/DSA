Given an integer array nums and an integer k, return the number of non-empty subarrays that have a sum divisible by k.

A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [4,5,0,-2,-3,1], k = 5
Output: 7
Explanation: There are 7 subarrays with a sum divisible by k = 5:
[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]
Example 2:

Input: nums = [5], k = 9
Output: 0
 
 ---------------------------------------------------------------------------------------------------------------------------
  class Solution {
public:
    int subarraysDivByK(vector<int>& nums, int k) {
        vector<int>counts(k,0);
        //empty vector is made to store the counts value 
        int sum=0;
        for(int x:nums){
            sum+=(x%k + k)%k; 
            counts[sum%k]++; //in case of -2 we got sum 7 which is greater than 5 so thats why we have modulo sum again and store it occurence
        }
        int result=counts[0];// in case of value 0 we need to do nC2+n
        for(int c:counts)
            result+=(c*(c-1))/2;
        return result;
        
            
        }
    
};
